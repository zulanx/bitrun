{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "src/mainHack.js",
			"settings":
			{
				"buffer_size": 9885,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "if (j < 2) {\n\t\t\t\t//ns.tprint(`Made it into <4 :${j}: ${pList[j]}`);\n\t\t\t\tfor (y; y < tList.length; y++) {\n\t\t\t\t\tif (j >= pList.length) { continue };\n\t\t\t\t\tcurSVR = tList[y];\n\t\t\t\t\t//ns.tprint(curSVR);\n\t\t\t\t\tif (j < 2) {\n\t\t\t\t\t\tif (typeof curSVR !== 'undefined' && curSVR.length > 0) {\n\t\t\t\t\t\t\tcurSVRUsedRam = ns.getServerUsedRam(pList[j]);\n\t\t\t\t\t\t\tcurSVRMaxRam = ns.getServerMaxRam(pList[j]);\n\n\n\t\t\t\t\t\t\t//ns.tprint(`Checking: ${curSVR}`)\n\t\t\t\t\t\t\t//ns.tprint(curSVR[3] + '::Ram Needed: ' + (scrHackMem * threadLimit * threadCap) + ':: Ram Available: ' + curSVRUsedRam);\n\t\t\t\t\t\t\tramNeeded = (scrHackMem * threadLimit / 2 * threadCap);\n\t\t\t\t\t\t\tramAvailable = (curSVRMaxRam - curSVRUsedRam);\n\t\t\t\t\t\t\t//ns.tprint(`Name: ${j} - ${pList[j]} :: RAM: ${curSVRMaxRam} :: Used: ${curSVRUsedRam} :: Needed: ${ramNeeded}>${ramAvailable}`);\n\n\t\t\t\t\t\t\tif (ramNeeded > ramAvailable) { ns.print(`${pList[j]} out of ram :: Needed: ${ramNeeded}>${ramAvailable}`); j++ }; // current pserv is out of available ram, moving to next\n\n\t\t\t\t\t\t\tif (j < 2 && j < pList.length) {\n\t\t\t\t\t\t\t\tfor (let e = 0; e < threadCap; e++) {\n\t\t\t\t\t\t\t\t\tmaxThreads = Math.floor((curSVRMaxRam - curSVRUsedRam) / scrHackMem);\n\t\t\t\t\t\t\t\t\tif (j < 2 && j < pList.length) {\n\t\t\t\t\t\t\t\t\t\tcurSVRUsedRam = ns.getServerUsedRam(pList[j]);\n\t\t\t\t\t\t\t\t\t\tcurSVRMaxRam = ns.getServerMaxRam(pList[j]);\n\t\t\t\t\t\t\t\t\t\tramNeeded = (scrHackMem * threadLimit / 2 * threadCap);\n\t\t\t\t\t\t\t\t\t\tramAvailable = (curSVRMaxRam - curSVRUsedRam);\n\t\t\t\t\t\t\t\t\t\tif (ramNeeded <= ramAvailable) {\n\t\t\t\t\t\t\t\t\t\t\tif (ns.isRunning(scrHack, pList[j], [curSVR[0], e]) == false) {\n\t\t\t\t\t\t\t\t\t\t\t\t//ns.tprint('Run: ' + e);\n\n\t\t\t\t\t\t\t\t\t\t\t\t//if (e == 1) { ns.tprint(`copied ${scrHack} to ${pList[j]}`) };\n\t\t\t\t\t\t\t\t\t\t\t\tif (hackLvl > curSVR[3] && j < 2 && curSVR[1]) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait ns.scp(scrHack, 'home', pList[j]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tns.exec(scrHack, pList[j], threadLimit / 2, curSVR[0], e)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (e == threadCap - 1) { ns.print(`1 Started: ${pList[j]}, ${scrHack}, ${curSVR[0]}, L: ${threadLimit / 2}, C: ${threadCap} // `) };\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait ns.sleep(100);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t//ns.tprint(`Script: ${scrHack} // Host: ${pList[0]} // Target: ${curSVR[0]} // ${threadLimit} Threads`);\n\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (j >= 2 && j <= 24) {\n\t\t\t\t//ns.tprint(`Made it into >=4 (HV) :${j}: ${pList[j]}`);\n\t\t\t\tif (j >= pList.length) { continue };\n\t\t\t\t//for high value targets\n\t\t\t\t//work through high value list, highest to lowest\n\t\t\t\tfor (let f = 0; f < vHighValue.length; f++) {\n\t\t\t\t\tfor (let z = 0; z < tList.length; z++) {\n\t\t\t\t\t\tcurSVR = tList[z];\n\t\t\t\t\t\tif (typeof curSVR !== 'undefined' && curSVR.length > 0) {\n\t\t\t\t\t\t\tif (j >= pList.length) { continue };\n\t\t\t\t\t\t\tcurSVRUsedRam = ns.getServerUsedRam(pList[j]);\n\t\t\t\t\t\t\tcurSVRMaxRam = ns.getServerMaxRam(pList[j]);\n\t\t\t\t\t\t\tif (curSVRUsedRam > 0) { j++ }\n\t\t\t\t\t\t\tif (curSVR[0] == vHighValue[f]) { // if current pserv is out of ram, move next, then check to see if Target Min hack is over 500\n\t\t\t\t\t\t\t\t//ns.tprint(`3R :: [${curSVR}] :: HLVL: ${hackLvl}/${curSVR[3]} :: Root: ${curSVR[1]}`);\n\t\t\t\t\t\t\t\tif (curSVR[1] && curSVR[3] <= hackLvl) {\n\t\t\t\t\t\t\t\t\t//ns.tprint('4R');\n\t\t\t\t\t\t\t\t\tawait ns.scp(scrHack, 'home', pList[j]);\n\t\t\t\t\t\t\t\t\t//ns.tprint(`copied ${scrHack} to ${pList[j]}`);\n\t\t\t\t\t\t\t\t\tawait ns.run('sendIT.js', 1, scrHack, pList[j], vHighValue[f], threadLimit)\n\t\t\t\t\t\t\t\t\tns.print(`HV Started:  ${pList[j]}, ${scrHack}, ${curSVR[0]}, L: ${threadLimit / 2}, C: ${threadCap} //`)\n\t\t\t\t\t\t\t\t\tawait ns.sleep(100);\n\t\t\t\t\t\t\t\t\t//ns.tprint(`${j}-4+: We Attempted to Start ${pList[j]}, ${scrHack}, ${curSVR[0]}, L: ${threadLimit}, C: ${threadCap}`);\n\t\t\t\t\t\t\t\t};\n\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}",
			"settings":
			{
				"buffer_size": 3670,
				"line_ending": "Windows",
				"name": "if (j < 2) {"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAVg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"javasp",
				"Set Syntax: JavaScript"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install packa",
				"Package Control: Install Package"
			],
			[
				"js",
				"Set Syntax: JavaScript"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/GitHub/bitrun/src"
	],
	"file_history":
	[
		"/D/GitHub/bitrun/src/purchaseServer.js",
		"/F/VMs/QEMU/Kali/start.bat",
		"/D/GitHub/bitrun/src/1startPurchase.js",
		"/D/GitHub/bitrun/src/initFiles.ns",
		"/D/GitHub/bitrun/src/populateHome.js",
		"/D/GitHub/bitrun/src/mainHack.js",
		"/D/GitHub/bitrun/src/stocks.js",
		"/D/GitHub/bitrun/src/findServer.js",
		"/D/GitHub/bitrun/src/easyHack.js",
		"/D/GitHub/bitrun/src/scanServers.js",
		"/D/GitHub/bitrun/src/superSendIT.js"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"target",
			"Target",
			"target",
			"find"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/mainHack.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9885,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2430.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3670,
						"regions":
						{
						},
						"selection":
						[
							[
								1785,
								1745
							]
						],
						"settings":
						{
							"auto_name": "if (j < 2) {",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "bitrun-sublime.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 265.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
